error[E0277]: the trait bound `MyInt: bitflags::traits::Primitive` is not satisfied
   --> tests/compile-fail/bitflags_custom_bits.rs:133:22
    |
133 |     struct Flags128: MyInt {
    |                      ^^^^^ the trait `bitflags::traits::Primitive` is not implemented for `MyInt`
    |
    = help: the following other types implement trait `bitflags::traits::Primitive`:
              i128
              i16
              i32
              i64
              i8
              isize
              u128
              u16
            and $N others
note: required by a bound in `PublicFlags::Primitive`
   --> src/traits.rs
    |
    |     type Primitive: Primitive;
    |                     ^^^^^^^^^ required by this bound in `PublicFlags::Primitive`

error[E0308]: mismatched types
   --> tests/compile-fail/bitflags_custom_bits.rs:128:32
    |
127 |     fn write_hex<W: fmt::Write>(&self, writer: W) -> fmt::Result {
    |                  - this type parameter
128 |         LowerHex::fmt(&self.0, writer)
    |         -------------          ^^^^^^ expected `&mut Formatter<'_>`, found type parameter `W`
    |         |
    |         arguments to this function are incorrect
    |
    = note: expected mutable reference `&mut Formatter<'_>`
                  found type parameter `W`
note: method defined here
   --> $RUST/core/src/fmt/mod.rs

error[E0277]: can't compare `MyInt` with `_` in const contexts
   --> tests/compile-fail/bitflags_custom_bits.rs:132:1
    |
132 | / bitflags! {
133 | |     struct Flags128: MyInt {
134 | |         const A = MyInt(0b0000_0001u8);
135 | |         const B = MyInt(0b0000_0010u8);
136 | |         const C = MyInt(0b0000_0100u8);
137 | |     }
138 | | }
    | |_^ no implementation for `MyInt == _`
    |
    = help: the trait `~const PartialEq<_>` is not implemented for `MyInt`
note: the trait `PartialEq<_>` is implemented for `MyInt`, but that implementation is not `const`
   --> tests/compile-fail/bitflags_custom_bits.rs:132:1
    |
132 | / bitflags! {
133 | |     struct Flags128: MyInt {
134 | |         const A = MyInt(0b0000_0001u8);
135 | |         const B = MyInt(0b0000_0010u8);
136 | |         const C = MyInt(0b0000_0100u8);
137 | |     }
138 | | }
    | |_^
    = note: this error originates in the macro `__impl_public_bitflags` which comes from the expansion of the macro `bitflags` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: can't compare `MyInt` with `_` in const contexts
   --> tests/compile-fail/bitflags_custom_bits.rs:132:1
    |
132 | / bitflags! {
133 | |     struct Flags128: MyInt {
134 | |         const A = MyInt(0b0000_0001u8);
135 | |         const B = MyInt(0b0000_0010u8);
136 | |         const C = MyInt(0b0000_0100u8);
137 | |     }
138 | | }
    | |_^ no implementation for `MyInt == _`
    |
    = help: the trait `~const PartialEq<_>` is not implemented for `MyInt`
note: the trait `PartialEq<_>` is implemented for `MyInt`, but that implementation is not `const`
   --> tests/compile-fail/bitflags_custom_bits.rs:132:1
    |
132 | / bitflags! {
133 | |     struct Flags128: MyInt {
134 | |         const A = MyInt(0b0000_0001u8);
135 | |         const B = MyInt(0b0000_0010u8);
136 | |         const C = MyInt(0b0000_0100u8);
137 | |     }
138 | | }
    | |_^
    = note: this error originates in the macro `__impl_public_bitflags` which comes from the expansion of the macro `bitflags` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `MyInt: BitAnd` is not satisfied
   --> tests/compile-fail/bitflags_custom_bits.rs:132:1
    |
132 | / bitflags! {
133 | |     struct Flags128: MyInt {
134 | |         const A = MyInt(0b0000_0001u8);
135 | |         const B = MyInt(0b0000_0010u8);
136 | |         const C = MyInt(0b0000_0100u8);
137 | |     }
138 | | }
    | |_^ no implementation for `MyInt & MyInt`
    |
    = help: the trait `~const BitAnd` is not implemented for `MyInt`
note: the trait `BitAnd` is implemented for `MyInt`, but that implementation is not `const`
   --> tests/compile-fail/bitflags_custom_bits.rs:132:1
    |
132 | / bitflags! {
133 | |     struct Flags128: MyInt {
134 | |         const A = MyInt(0b0000_0001u8);
135 | |         const B = MyInt(0b0000_0010u8);
136 | |         const C = MyInt(0b0000_0100u8);
137 | |     }
138 | | }
    | |_^
    = note: this error originates in the macro `__impl_public_bitflags` which comes from the expansion of the macro `bitflags` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: can't compare `MyInt` with `_` in const contexts
   --> tests/compile-fail/bitflags_custom_bits.rs:132:1
    |
132 | / bitflags! {
133 | |     struct Flags128: MyInt {
134 | |         const A = MyInt(0b0000_0001u8);
135 | |         const B = MyInt(0b0000_0010u8);
136 | |         const C = MyInt(0b0000_0100u8);
137 | |     }
138 | | }
    | |_^ no implementation for `MyInt == _`
    |
    = help: the trait `~const PartialEq<_>` is not implemented for `MyInt`
note: the trait `PartialEq<_>` is implemented for `MyInt`, but that implementation is not `const`
   --> tests/compile-fail/bitflags_custom_bits.rs:132:1
    |
132 | / bitflags! {
133 | |     struct Flags128: MyInt {
134 | |         const A = MyInt(0b0000_0001u8);
135 | |         const B = MyInt(0b0000_0010u8);
136 | |         const C = MyInt(0b0000_0100u8);
137 | |     }
138 | | }
    | |_^
    = note: this error originates in the macro `__impl_public_bitflags` which comes from the expansion of the macro `bitflags` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `MyInt: BitOr` is not satisfied
   --> tests/compile-fail/bitflags_custom_bits.rs:132:1
    |
132 | / bitflags! {
133 | |     struct Flags128: MyInt {
134 | |         const A = MyInt(0b0000_0001u8);
135 | |         const B = MyInt(0b0000_0010u8);
136 | |         const C = MyInt(0b0000_0100u8);
137 | |     }
138 | | }
    | |_^ no implementation for `MyInt | MyInt`
    |
    = help: the trait `~const BitOr` is not implemented for `MyInt`
note: the trait `BitOr` is implemented for `MyInt`, but that implementation is not `const`
   --> tests/compile-fail/bitflags_custom_bits.rs:132:1
    |
132 | / bitflags! {
133 | |     struct Flags128: MyInt {
134 | |         const A = MyInt(0b0000_0001u8);
135 | |         const B = MyInt(0b0000_0010u8);
136 | |         const C = MyInt(0b0000_0100u8);
137 | |     }
138 | | }
    | |_^
    = note: this error originates in the macro `__impl_public_bitflags` which comes from the expansion of the macro `bitflags` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: can't compare `MyInt` with `_` in const contexts
   --> tests/compile-fail/bitflags_custom_bits.rs:132:1
    |
132 | / bitflags! {
133 | |     struct Flags128: MyInt {
134 | |         const A = MyInt(0b0000_0001u8);
135 | |         const B = MyInt(0b0000_0010u8);
136 | |         const C = MyInt(0b0000_0100u8);
137 | |     }
138 | | }
    | |_^ no implementation for `MyInt == _`
    |
    = help: the trait `~const PartialEq<_>` is not implemented for `MyInt`
note: the trait `PartialEq<_>` is implemented for `MyInt`, but that implementation is not `const`
   --> tests/compile-fail/bitflags_custom_bits.rs:132:1
    |
132 | / bitflags! {
133 | |     struct Flags128: MyInt {
134 | |         const A = MyInt(0b0000_0001u8);
135 | |         const B = MyInt(0b0000_0010u8);
136 | |         const C = MyInt(0b0000_0100u8);
137 | |     }
138 | | }
    | |_^
    = note: this error originates in the macro `__impl_public_bitflags` which comes from the expansion of the macro `bitflags` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `MyInt: BitOr` is not satisfied
   --> tests/compile-fail/bitflags_custom_bits.rs:132:1
    |
132 | / bitflags! {
133 | |     struct Flags128: MyInt {
134 | |         const A = MyInt(0b0000_0001u8);
135 | |         const B = MyInt(0b0000_0010u8);
136 | |         const C = MyInt(0b0000_0100u8);
137 | |     }
138 | | }
    | |_^ no implementation for `MyInt | MyInt`
    |
    = help: the trait `~const BitOr` is not implemented for `MyInt`
note: the trait `BitOr` is implemented for `MyInt`, but that implementation is not `const`
   --> tests/compile-fail/bitflags_custom_bits.rs:132:1
    |
132 | / bitflags! {
133 | |     struct Flags128: MyInt {
134 | |         const A = MyInt(0b0000_0001u8);
135 | |         const B = MyInt(0b0000_0010u8);
136 | |         const C = MyInt(0b0000_0100u8);
137 | |     }
138 | | }
    | |_^
    = note: this error originates in the macro `__impl_public_bitflags` which comes from the expansion of the macro `bitflags` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: can't compare `MyInt` with `_` in const contexts
   --> tests/compile-fail/bitflags_custom_bits.rs:132:1
    |
132 | / bitflags! {
133 | |     struct Flags128: MyInt {
134 | |         const A = MyInt(0b0000_0001u8);
135 | |         const B = MyInt(0b0000_0010u8);
136 | |         const C = MyInt(0b0000_0100u8);
137 | |     }
138 | | }
    | |_^ no implementation for `MyInt == _`
    |
    = help: the trait `~const PartialEq<_>` is not implemented for `MyInt`
note: the trait `PartialEq<_>` is implemented for `MyInt`, but that implementation is not `const`
   --> tests/compile-fail/bitflags_custom_bits.rs:132:1
    |
132 | / bitflags! {
133 | |     struct Flags128: MyInt {
134 | |         const A = MyInt(0b0000_0001u8);
135 | |         const B = MyInt(0b0000_0010u8);
136 | |         const C = MyInt(0b0000_0100u8);
137 | |     }
138 | | }
    | |_^
    = note: this error originates in the macro `__impl_public_bitflags` which comes from the expansion of the macro `bitflags` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `MyInt: BitAnd` is not satisfied
   --> tests/compile-fail/bitflags_custom_bits.rs:132:1
    |
132 | / bitflags! {
133 | |     struct Flags128: MyInt {
134 | |         const A = MyInt(0b0000_0001u8);
135 | |         const B = MyInt(0b0000_0010u8);
136 | |         const C = MyInt(0b0000_0100u8);
137 | |     }
138 | | }
    | |_^ no implementation for `MyInt & MyInt`
    |
    = help: the trait `~const BitAnd` is not implemented for `MyInt`
note: the trait `BitAnd` is implemented for `MyInt`, but that implementation is not `const`
   --> tests/compile-fail/bitflags_custom_bits.rs:132:1
    |
132 | / bitflags! {
133 | |     struct Flags128: MyInt {
134 | |         const A = MyInt(0b0000_0001u8);
135 | |         const B = MyInt(0b0000_0010u8);
136 | |         const C = MyInt(0b0000_0100u8);
137 | |     }
138 | | }
    | |_^
    = note: this error originates in the macro `__impl_public_bitflags` which comes from the expansion of the macro `bitflags` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `MyInt: BitAnd` is not satisfied
   --> tests/compile-fail/bitflags_custom_bits.rs:132:1
    |
132 | / bitflags! {
133 | |     struct Flags128: MyInt {
134 | |         const A = MyInt(0b0000_0001u8);
135 | |         const B = MyInt(0b0000_0010u8);
136 | |         const C = MyInt(0b0000_0100u8);
137 | |     }
138 | | }
    | |_^ no implementation for `MyInt & MyInt`
    |
    = help: the trait `~const BitAnd` is not implemented for `MyInt`
note: the trait `BitAnd` is implemented for `MyInt`, but that implementation is not `const`
   --> tests/compile-fail/bitflags_custom_bits.rs:132:1
    |
132 | / bitflags! {
133 | |     struct Flags128: MyInt {
134 | |         const A = MyInt(0b0000_0001u8);
135 | |         const B = MyInt(0b0000_0010u8);
136 | |         const C = MyInt(0b0000_0100u8);
137 | |     }
138 | | }
    | |_^
    = note: this error originates in the macro `__impl_public_bitflags` which comes from the expansion of the macro `bitflags` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: can't compare `MyInt` with `_` in const contexts
   --> tests/compile-fail/bitflags_custom_bits.rs:132:1
    |
132 | / bitflags! {
133 | |     struct Flags128: MyInt {
134 | |         const A = MyInt(0b0000_0001u8);
135 | |         const B = MyInt(0b0000_0010u8);
136 | |         const C = MyInt(0b0000_0100u8);
137 | |     }
138 | | }
    | |_^ no implementation for `MyInt == _`
    |
    = help: the trait `~const PartialEq<_>` is not implemented for `MyInt`
note: the trait `PartialEq<_>` is implemented for `MyInt`, but that implementation is not `const`
   --> tests/compile-fail/bitflags_custom_bits.rs:132:1
    |
132 | / bitflags! {
133 | |     struct Flags128: MyInt {
134 | |         const A = MyInt(0b0000_0001u8);
135 | |         const B = MyInt(0b0000_0010u8);
136 | |         const C = MyInt(0b0000_0100u8);
137 | |     }
138 | | }
    | |_^
    = note: this error originates in the macro `__impl_public_bitflags` which comes from the expansion of the macro `bitflags` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `MyInt: BitAnd` is not satisfied
   --> tests/compile-fail/bitflags_custom_bits.rs:132:1
    |
132 | / bitflags! {
133 | |     struct Flags128: MyInt {
134 | |         const A = MyInt(0b0000_0001u8);
135 | |         const B = MyInt(0b0000_0010u8);
136 | |         const C = MyInt(0b0000_0100u8);
137 | |     }
138 | | }
    | |_^ no implementation for `MyInt & MyInt`
    |
    = help: the trait `~const BitAnd` is not implemented for `MyInt`
note: the trait `BitAnd` is implemented for `MyInt`, but that implementation is not `const`
   --> tests/compile-fail/bitflags_custom_bits.rs:132:1
    |
132 | / bitflags! {
133 | |     struct Flags128: MyInt {
134 | |         const A = MyInt(0b0000_0001u8);
135 | |         const B = MyInt(0b0000_0010u8);
136 | |         const C = MyInt(0b0000_0100u8);
137 | |     }
138 | | }
    | |_^
    = note: this error originates in the macro `__impl_public_bitflags` which comes from the expansion of the macro `bitflags` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `MyInt: BitOr` is not satisfied
   --> tests/compile-fail/bitflags_custom_bits.rs:132:1
    |
132 | / bitflags! {
133 | |     struct Flags128: MyInt {
134 | |         const A = MyInt(0b0000_0001u8);
135 | |         const B = MyInt(0b0000_0010u8);
136 | |         const C = MyInt(0b0000_0100u8);
137 | |     }
138 | | }
    | |_^ no implementation for `MyInt | MyInt`
    |
    = help: the trait `~const BitOr` is not implemented for `MyInt`
note: the trait `BitOr` is implemented for `MyInt`, but that implementation is not `const`
   --> tests/compile-fail/bitflags_custom_bits.rs:132:1
    |
132 | / bitflags! {
133 | |     struct Flags128: MyInt {
134 | |         const A = MyInt(0b0000_0001u8);
135 | |         const B = MyInt(0b0000_0010u8);
136 | |         const C = MyInt(0b0000_0100u8);
137 | |     }
138 | | }
    | |_^
    = note: this error originates in the macro `__impl_public_bitflags` which comes from the expansion of the macro `bitflags` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `MyInt: BitAnd` is not satisfied
   --> tests/compile-fail/bitflags_custom_bits.rs:132:1
    |
132 | / bitflags! {
133 | |     struct Flags128: MyInt {
134 | |         const A = MyInt(0b0000_0001u8);
135 | |         const B = MyInt(0b0000_0010u8);
136 | |         const C = MyInt(0b0000_0100u8);
137 | |     }
138 | | }
    | |_^ no implementation for `MyInt & MyInt`
    |
    = help: the trait `~const BitAnd` is not implemented for `MyInt`
note: the trait `BitAnd` is implemented for `MyInt`, but that implementation is not `const`
   --> tests/compile-fail/bitflags_custom_bits.rs:132:1
    |
132 | / bitflags! {
133 | |     struct Flags128: MyInt {
134 | |         const A = MyInt(0b0000_0001u8);
135 | |         const B = MyInt(0b0000_0010u8);
136 | |         const C = MyInt(0b0000_0100u8);
137 | |     }
138 | | }
    | |_^
    = note: this error originates in the macro `__impl_public_bitflags` which comes from the expansion of the macro `bitflags` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `MyInt: Not` is not satisfied
   --> tests/compile-fail/bitflags_custom_bits.rs:132:1
    |
132 | / bitflags! {
133 | |     struct Flags128: MyInt {
134 | |         const A = MyInt(0b0000_0001u8);
135 | |         const B = MyInt(0b0000_0010u8);
136 | |         const C = MyInt(0b0000_0100u8);
137 | |     }
138 | | }
    | |_^ the trait `~const Not` is not implemented for `MyInt`
    |
note: the trait `Not` is implemented for `MyInt`, but that implementation is not `const`
   --> tests/compile-fail/bitflags_custom_bits.rs:132:1
    |
132 | / bitflags! {
133 | |     struct Flags128: MyInt {
134 | |         const A = MyInt(0b0000_0001u8);
135 | |         const B = MyInt(0b0000_0010u8);
136 | |         const C = MyInt(0b0000_0100u8);
137 | |     }
138 | | }
    | |_^
    = note: this error originates in the macro `__impl_public_bitflags` which comes from the expansion of the macro `bitflags` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `MyInt: BitXor` is not satisfied
   --> tests/compile-fail/bitflags_custom_bits.rs:132:1
    |
132 | / bitflags! {
133 | |     struct Flags128: MyInt {
134 | |         const A = MyInt(0b0000_0001u8);
135 | |         const B = MyInt(0b0000_0010u8);
136 | |         const C = MyInt(0b0000_0100u8);
137 | |     }
138 | | }
    | |_^ no implementation for `MyInt ^ MyInt`
    |
    = help: the trait `~const BitXor` is not implemented for `MyInt`
note: the trait `BitXor` is implemented for `MyInt`, but that implementation is not `const`
   --> tests/compile-fail/bitflags_custom_bits.rs:132:1
    |
132 | / bitflags! {
133 | |     struct Flags128: MyInt {
134 | |         const A = MyInt(0b0000_0001u8);
135 | |         const B = MyInt(0b0000_0010u8);
136 | |         const C = MyInt(0b0000_0100u8);
137 | |     }
138 | | }
    | |_^
    = note: this error originates in the macro `__impl_public_bitflags` which comes from the expansion of the macro `bitflags` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `MyInt: Not` is not satisfied
   --> tests/compile-fail/bitflags_custom_bits.rs:132:1
    |
132 | / bitflags! {
133 | |     struct Flags128: MyInt {
134 | |         const A = MyInt(0b0000_0001u8);
135 | |         const B = MyInt(0b0000_0010u8);
136 | |         const C = MyInt(0b0000_0100u8);
137 | |     }
138 | | }
    | |_^ the trait `~const Not` is not implemented for `MyInt`
    |
note: the trait `Not` is implemented for `MyInt`, but that implementation is not `const`
   --> tests/compile-fail/bitflags_custom_bits.rs:132:1
    |
132 | / bitflags! {
133 | |     struct Flags128: MyInt {
134 | |         const A = MyInt(0b0000_0001u8);
135 | |         const B = MyInt(0b0000_0010u8);
136 | |         const C = MyInt(0b0000_0100u8);
137 | |     }
138 | | }
    | |_^
    = note: this error originates in the macro `__impl_public_bitflags` which comes from the expansion of the macro `bitflags` (in Nightly builds, run with -Z macro-backtrace for more info)
