error[E0277]: the trait bound `MyInt: bitflags::traits::Primitive` is not satisfied
   --> tests/compile-fail/bitflags_custom_bits.rs:127:22
    |
127 |     struct Flags128: MyInt {
    |                      ^^^^^ the trait `bitflags::traits::Primitive` is not implemented for `MyInt`
    |
    = help: the following other types implement trait `bitflags::traits::Primitive`:
              i128
              i16
              i32
              i64
              i8
              isize
              u128
              u16
            and $N others
note: required by a bound in `PublicFlags::Primitive`
   --> src/traits.rs
    |
    |     type Primitive: Primitive;
    |                     ^^^^^^^^^ required by this bound in `PublicFlags::Primitive`

error[E0277]: the trait bound `MyInt: WriteHex` is not satisfied
   --> tests/compile-fail/bitflags_custom_bits.rs:126:1
    |
126 | / bitflags! {
127 | |     struct Flags128: MyInt {
128 | |         const A = MyInt(0b0000_0001u8);
129 | |         const B = MyInt(0b0000_0010u8);
130 | |         const C = MyInt(0b0000_0100u8);
131 | |     }
132 | | }
    | | ^
    | | |
    | |_the trait `WriteHex` is not implemented for `MyInt`
    |   required by a bound introduced by this call
    |
    = help: the following other types implement trait `WriteHex`:
              i128
              i16
              i32
              i64
              i8
              isize
              u128
              u16
            and $N others
note: required by a bound in `to_writer`
   --> src/parser.rs
    |
    |     B::Bits: WriteHex,
    |              ^^^^^^^^ required by this bound in `to_writer`
    = note: this error originates in the macro `__impl_internal_bitflags` which comes from the expansion of the macro `bitflags` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: can't compare `MyInt` with `_` in const contexts
   --> tests/compile-fail/bitflags_custom_bits.rs:126:1
    |
126 | / bitflags! {
127 | |     struct Flags128: MyInt {
128 | |         const A = MyInt(0b0000_0001u8);
129 | |         const B = MyInt(0b0000_0010u8);
130 | |         const C = MyInt(0b0000_0100u8);
131 | |     }
132 | | }
    | |_^ no implementation for `MyInt == _`
    |
    = help: the trait `~const PartialEq<_>` is not implemented for `MyInt`
note: the trait `PartialEq<_>` is implemented for `MyInt`, but that implementation is not `const`
   --> tests/compile-fail/bitflags_custom_bits.rs:126:1
    |
126 | / bitflags! {
127 | |     struct Flags128: MyInt {
128 | |         const A = MyInt(0b0000_0001u8);
129 | |         const B = MyInt(0b0000_0010u8);
130 | |         const C = MyInt(0b0000_0100u8);
131 | |     }
132 | | }
    | |_^
    = note: this error originates in the macro `__impl_public_bitflags` which comes from the expansion of the macro `bitflags` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: can't compare `MyInt` with `_` in const contexts
   --> tests/compile-fail/bitflags_custom_bits.rs:126:1
    |
126 | / bitflags! {
127 | |     struct Flags128: MyInt {
128 | |         const A = MyInt(0b0000_0001u8);
129 | |         const B = MyInt(0b0000_0010u8);
130 | |         const C = MyInt(0b0000_0100u8);
131 | |     }
132 | | }
    | |_^ no implementation for `MyInt == _`
    |
    = help: the trait `~const PartialEq<_>` is not implemented for `MyInt`
note: the trait `PartialEq<_>` is implemented for `MyInt`, but that implementation is not `const`
   --> tests/compile-fail/bitflags_custom_bits.rs:126:1
    |
126 | / bitflags! {
127 | |     struct Flags128: MyInt {
128 | |         const A = MyInt(0b0000_0001u8);
129 | |         const B = MyInt(0b0000_0010u8);
130 | |         const C = MyInt(0b0000_0100u8);
131 | |     }
132 | | }
    | |_^
    = note: this error originates in the macro `__impl_public_bitflags` which comes from the expansion of the macro `bitflags` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `MyInt: BitAnd` is not satisfied
   --> tests/compile-fail/bitflags_custom_bits.rs:126:1
    |
126 | / bitflags! {
127 | |     struct Flags128: MyInt {
128 | |         const A = MyInt(0b0000_0001u8);
129 | |         const B = MyInt(0b0000_0010u8);
130 | |         const C = MyInt(0b0000_0100u8);
131 | |     }
132 | | }
    | |_^ no implementation for `MyInt & MyInt`
    |
    = help: the trait `~const BitAnd` is not implemented for `MyInt`
note: the trait `BitAnd` is implemented for `MyInt`, but that implementation is not `const`
   --> tests/compile-fail/bitflags_custom_bits.rs:126:1
    |
126 | / bitflags! {
127 | |     struct Flags128: MyInt {
128 | |         const A = MyInt(0b0000_0001u8);
129 | |         const B = MyInt(0b0000_0010u8);
130 | |         const C = MyInt(0b0000_0100u8);
131 | |     }
132 | | }
    | |_^
    = note: this error originates in the macro `__impl_public_bitflags` which comes from the expansion of the macro `bitflags` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: can't compare `MyInt` with `_` in const contexts
   --> tests/compile-fail/bitflags_custom_bits.rs:126:1
    |
126 | / bitflags! {
127 | |     struct Flags128: MyInt {
128 | |         const A = MyInt(0b0000_0001u8);
129 | |         const B = MyInt(0b0000_0010u8);
130 | |         const C = MyInt(0b0000_0100u8);
131 | |     }
132 | | }
    | |_^ no implementation for `MyInt == _`
    |
    = help: the trait `~const PartialEq<_>` is not implemented for `MyInt`
note: the trait `PartialEq<_>` is implemented for `MyInt`, but that implementation is not `const`
   --> tests/compile-fail/bitflags_custom_bits.rs:126:1
    |
126 | / bitflags! {
127 | |     struct Flags128: MyInt {
128 | |         const A = MyInt(0b0000_0001u8);
129 | |         const B = MyInt(0b0000_0010u8);
130 | |         const C = MyInt(0b0000_0100u8);
131 | |     }
132 | | }
    | |_^
    = note: this error originates in the macro `__impl_public_bitflags` which comes from the expansion of the macro `bitflags` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `MyInt: BitOr` is not satisfied
   --> tests/compile-fail/bitflags_custom_bits.rs:126:1
    |
126 | / bitflags! {
127 | |     struct Flags128: MyInt {
128 | |         const A = MyInt(0b0000_0001u8);
129 | |         const B = MyInt(0b0000_0010u8);
130 | |         const C = MyInt(0b0000_0100u8);
131 | |     }
132 | | }
    | |_^ no implementation for `MyInt | MyInt`
    |
    = help: the trait `~const BitOr` is not implemented for `MyInt`
note: the trait `BitOr` is implemented for `MyInt`, but that implementation is not `const`
   --> tests/compile-fail/bitflags_custom_bits.rs:126:1
    |
126 | / bitflags! {
127 | |     struct Flags128: MyInt {
128 | |         const A = MyInt(0b0000_0001u8);
129 | |         const B = MyInt(0b0000_0010u8);
130 | |         const C = MyInt(0b0000_0100u8);
131 | |     }
132 | | }
    | |_^
    = note: this error originates in the macro `__impl_public_bitflags` which comes from the expansion of the macro `bitflags` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: can't compare `MyInt` with `_` in const contexts
   --> tests/compile-fail/bitflags_custom_bits.rs:126:1
    |
126 | / bitflags! {
127 | |     struct Flags128: MyInt {
128 | |         const A = MyInt(0b0000_0001u8);
129 | |         const B = MyInt(0b0000_0010u8);
130 | |         const C = MyInt(0b0000_0100u8);
131 | |     }
132 | | }
    | |_^ no implementation for `MyInt == _`
    |
    = help: the trait `~const PartialEq<_>` is not implemented for `MyInt`
note: the trait `PartialEq<_>` is implemented for `MyInt`, but that implementation is not `const`
   --> tests/compile-fail/bitflags_custom_bits.rs:126:1
    |
126 | / bitflags! {
127 | |     struct Flags128: MyInt {
128 | |         const A = MyInt(0b0000_0001u8);
129 | |         const B = MyInt(0b0000_0010u8);
130 | |         const C = MyInt(0b0000_0100u8);
131 | |     }
132 | | }
    | |_^
    = note: this error originates in the macro `__impl_public_bitflags` which comes from the expansion of the macro `bitflags` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `MyInt: BitOr` is not satisfied
   --> tests/compile-fail/bitflags_custom_bits.rs:126:1
    |
126 | / bitflags! {
127 | |     struct Flags128: MyInt {
128 | |         const A = MyInt(0b0000_0001u8);
129 | |         const B = MyInt(0b0000_0010u8);
130 | |         const C = MyInt(0b0000_0100u8);
131 | |     }
132 | | }
    | |_^ no implementation for `MyInt | MyInt`
    |
    = help: the trait `~const BitOr` is not implemented for `MyInt`
note: the trait `BitOr` is implemented for `MyInt`, but that implementation is not `const`
   --> tests/compile-fail/bitflags_custom_bits.rs:126:1
    |
126 | / bitflags! {
127 | |     struct Flags128: MyInt {
128 | |         const A = MyInt(0b0000_0001u8);
129 | |         const B = MyInt(0b0000_0010u8);
130 | |         const C = MyInt(0b0000_0100u8);
131 | |     }
132 | | }
    | |_^
    = note: this error originates in the macro `__impl_public_bitflags` which comes from the expansion of the macro `bitflags` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: can't compare `MyInt` with `_` in const contexts
   --> tests/compile-fail/bitflags_custom_bits.rs:126:1
    |
126 | / bitflags! {
127 | |     struct Flags128: MyInt {
128 | |         const A = MyInt(0b0000_0001u8);
129 | |         const B = MyInt(0b0000_0010u8);
130 | |         const C = MyInt(0b0000_0100u8);
131 | |     }
132 | | }
    | |_^ no implementation for `MyInt == _`
    |
    = help: the trait `~const PartialEq<_>` is not implemented for `MyInt`
note: the trait `PartialEq<_>` is implemented for `MyInt`, but that implementation is not `const`
   --> tests/compile-fail/bitflags_custom_bits.rs:126:1
    |
126 | / bitflags! {
127 | |     struct Flags128: MyInt {
128 | |         const A = MyInt(0b0000_0001u8);
129 | |         const B = MyInt(0b0000_0010u8);
130 | |         const C = MyInt(0b0000_0100u8);
131 | |     }
132 | | }
    | |_^
    = note: this error originates in the macro `__impl_public_bitflags` which comes from the expansion of the macro `bitflags` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `MyInt: BitAnd` is not satisfied
   --> tests/compile-fail/bitflags_custom_bits.rs:126:1
    |
126 | / bitflags! {
127 | |     struct Flags128: MyInt {
128 | |         const A = MyInt(0b0000_0001u8);
129 | |         const B = MyInt(0b0000_0010u8);
130 | |         const C = MyInt(0b0000_0100u8);
131 | |     }
132 | | }
    | |_^ no implementation for `MyInt & MyInt`
    |
    = help: the trait `~const BitAnd` is not implemented for `MyInt`
note: the trait `BitAnd` is implemented for `MyInt`, but that implementation is not `const`
   --> tests/compile-fail/bitflags_custom_bits.rs:126:1
    |
126 | / bitflags! {
127 | |     struct Flags128: MyInt {
128 | |         const A = MyInt(0b0000_0001u8);
129 | |         const B = MyInt(0b0000_0010u8);
130 | |         const C = MyInt(0b0000_0100u8);
131 | |     }
132 | | }
    | |_^
    = note: this error originates in the macro `__impl_public_bitflags` which comes from the expansion of the macro `bitflags` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `MyInt: BitAnd` is not satisfied
   --> tests/compile-fail/bitflags_custom_bits.rs:126:1
    |
126 | / bitflags! {
127 | |     struct Flags128: MyInt {
128 | |         const A = MyInt(0b0000_0001u8);
129 | |         const B = MyInt(0b0000_0010u8);
130 | |         const C = MyInt(0b0000_0100u8);
131 | |     }
132 | | }
    | |_^ no implementation for `MyInt & MyInt`
    |
    = help: the trait `~const BitAnd` is not implemented for `MyInt`
note: the trait `BitAnd` is implemented for `MyInt`, but that implementation is not `const`
   --> tests/compile-fail/bitflags_custom_bits.rs:126:1
    |
126 | / bitflags! {
127 | |     struct Flags128: MyInt {
128 | |         const A = MyInt(0b0000_0001u8);
129 | |         const B = MyInt(0b0000_0010u8);
130 | |         const C = MyInt(0b0000_0100u8);
131 | |     }
132 | | }
    | |_^
    = note: this error originates in the macro `__impl_public_bitflags` which comes from the expansion of the macro `bitflags` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: can't compare `MyInt` with `_` in const contexts
   --> tests/compile-fail/bitflags_custom_bits.rs:126:1
    |
126 | / bitflags! {
127 | |     struct Flags128: MyInt {
128 | |         const A = MyInt(0b0000_0001u8);
129 | |         const B = MyInt(0b0000_0010u8);
130 | |         const C = MyInt(0b0000_0100u8);
131 | |     }
132 | | }
    | |_^ no implementation for `MyInt == _`
    |
    = help: the trait `~const PartialEq<_>` is not implemented for `MyInt`
note: the trait `PartialEq<_>` is implemented for `MyInt`, but that implementation is not `const`
   --> tests/compile-fail/bitflags_custom_bits.rs:126:1
    |
126 | / bitflags! {
127 | |     struct Flags128: MyInt {
128 | |         const A = MyInt(0b0000_0001u8);
129 | |         const B = MyInt(0b0000_0010u8);
130 | |         const C = MyInt(0b0000_0100u8);
131 | |     }
132 | | }
    | |_^
    = note: this error originates in the macro `__impl_public_bitflags` which comes from the expansion of the macro `bitflags` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `MyInt: BitAnd` is not satisfied
   --> tests/compile-fail/bitflags_custom_bits.rs:126:1
    |
126 | / bitflags! {
127 | |     struct Flags128: MyInt {
128 | |         const A = MyInt(0b0000_0001u8);
129 | |         const B = MyInt(0b0000_0010u8);
130 | |         const C = MyInt(0b0000_0100u8);
131 | |     }
132 | | }
    | |_^ no implementation for `MyInt & MyInt`
    |
    = help: the trait `~const BitAnd` is not implemented for `MyInt`
note: the trait `BitAnd` is implemented for `MyInt`, but that implementation is not `const`
   --> tests/compile-fail/bitflags_custom_bits.rs:126:1
    |
126 | / bitflags! {
127 | |     struct Flags128: MyInt {
128 | |         const A = MyInt(0b0000_0001u8);
129 | |         const B = MyInt(0b0000_0010u8);
130 | |         const C = MyInt(0b0000_0100u8);
131 | |     }
132 | | }
    | |_^
    = note: this error originates in the macro `__impl_public_bitflags` which comes from the expansion of the macro `bitflags` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `MyInt: BitOr` is not satisfied
   --> tests/compile-fail/bitflags_custom_bits.rs:126:1
    |
126 | / bitflags! {
127 | |     struct Flags128: MyInt {
128 | |         const A = MyInt(0b0000_0001u8);
129 | |         const B = MyInt(0b0000_0010u8);
130 | |         const C = MyInt(0b0000_0100u8);
131 | |     }
132 | | }
    | |_^ no implementation for `MyInt | MyInt`
    |
    = help: the trait `~const BitOr` is not implemented for `MyInt`
note: the trait `BitOr` is implemented for `MyInt`, but that implementation is not `const`
   --> tests/compile-fail/bitflags_custom_bits.rs:126:1
    |
126 | / bitflags! {
127 | |     struct Flags128: MyInt {
128 | |         const A = MyInt(0b0000_0001u8);
129 | |         const B = MyInt(0b0000_0010u8);
130 | |         const C = MyInt(0b0000_0100u8);
131 | |     }
132 | | }
    | |_^
    = note: this error originates in the macro `__impl_public_bitflags` which comes from the expansion of the macro `bitflags` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `MyInt: BitAnd` is not satisfied
   --> tests/compile-fail/bitflags_custom_bits.rs:126:1
    |
126 | / bitflags! {
127 | |     struct Flags128: MyInt {
128 | |         const A = MyInt(0b0000_0001u8);
129 | |         const B = MyInt(0b0000_0010u8);
130 | |         const C = MyInt(0b0000_0100u8);
131 | |     }
132 | | }
    | |_^ no implementation for `MyInt & MyInt`
    |
    = help: the trait `~const BitAnd` is not implemented for `MyInt`
note: the trait `BitAnd` is implemented for `MyInt`, but that implementation is not `const`
   --> tests/compile-fail/bitflags_custom_bits.rs:126:1
    |
126 | / bitflags! {
127 | |     struct Flags128: MyInt {
128 | |         const A = MyInt(0b0000_0001u8);
129 | |         const B = MyInt(0b0000_0010u8);
130 | |         const C = MyInt(0b0000_0100u8);
131 | |     }
132 | | }
    | |_^
    = note: this error originates in the macro `__impl_public_bitflags` which comes from the expansion of the macro `bitflags` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `MyInt: Not` is not satisfied
   --> tests/compile-fail/bitflags_custom_bits.rs:126:1
    |
126 | / bitflags! {
127 | |     struct Flags128: MyInt {
128 | |         const A = MyInt(0b0000_0001u8);
129 | |         const B = MyInt(0b0000_0010u8);
130 | |         const C = MyInt(0b0000_0100u8);
131 | |     }
132 | | }
    | |_^ the trait `~const Not` is not implemented for `MyInt`
    |
note: the trait `Not` is implemented for `MyInt`, but that implementation is not `const`
   --> tests/compile-fail/bitflags_custom_bits.rs:126:1
    |
126 | / bitflags! {
127 | |     struct Flags128: MyInt {
128 | |         const A = MyInt(0b0000_0001u8);
129 | |         const B = MyInt(0b0000_0010u8);
130 | |         const C = MyInt(0b0000_0100u8);
131 | |     }
132 | | }
    | |_^
    = note: this error originates in the macro `__impl_public_bitflags` which comes from the expansion of the macro `bitflags` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `MyInt: BitXor` is not satisfied
   --> tests/compile-fail/bitflags_custom_bits.rs:126:1
    |
126 | / bitflags! {
127 | |     struct Flags128: MyInt {
128 | |         const A = MyInt(0b0000_0001u8);
129 | |         const B = MyInt(0b0000_0010u8);
130 | |         const C = MyInt(0b0000_0100u8);
131 | |     }
132 | | }
    | |_^ no implementation for `MyInt ^ MyInt`
    |
    = help: the trait `~const BitXor` is not implemented for `MyInt`
note: the trait `BitXor` is implemented for `MyInt`, but that implementation is not `const`
   --> tests/compile-fail/bitflags_custom_bits.rs:126:1
    |
126 | / bitflags! {
127 | |     struct Flags128: MyInt {
128 | |         const A = MyInt(0b0000_0001u8);
129 | |         const B = MyInt(0b0000_0010u8);
130 | |         const C = MyInt(0b0000_0100u8);
131 | |     }
132 | | }
    | |_^
    = note: this error originates in the macro `__impl_public_bitflags` which comes from the expansion of the macro `bitflags` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `MyInt: Not` is not satisfied
   --> tests/compile-fail/bitflags_custom_bits.rs:126:1
    |
126 | / bitflags! {
127 | |     struct Flags128: MyInt {
128 | |         const A = MyInt(0b0000_0001u8);
129 | |         const B = MyInt(0b0000_0010u8);
130 | |         const C = MyInt(0b0000_0100u8);
131 | |     }
132 | | }
    | |_^ the trait `~const Not` is not implemented for `MyInt`
    |
note: the trait `Not` is implemented for `MyInt`, but that implementation is not `const`
   --> tests/compile-fail/bitflags_custom_bits.rs:126:1
    |
126 | / bitflags! {
127 | |     struct Flags128: MyInt {
128 | |         const A = MyInt(0b0000_0001u8);
129 | |         const B = MyInt(0b0000_0010u8);
130 | |         const C = MyInt(0b0000_0100u8);
131 | |     }
132 | | }
    | |_^
    = note: this error originates in the macro `__impl_public_bitflags` which comes from the expansion of the macro `bitflags` (in Nightly builds, run with -Z macro-backtrace for more info)
